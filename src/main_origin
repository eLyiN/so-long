/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: aarribas <aarribas@student.42malaga.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/01/31 00:40:08 by W2Wizard          #+#    #+#             */
/*   Updated: 2022/08/03 00:18:32 by aarribas         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/so_long.h"

mlx_image_t	*g_back;

int	check_av_map(char *av)
{
	while (*av)
	{
		if (*av == '.')
		{
			if (!ft_strncmp(av, ".ber\0", 5))
				return (EXIT_SUCCESS);
			else
				return (EXIT_FAILURE);
		}
		av++;
	}
	return (EXIT_FAILURE);
}

void	error_msg(char *error)
{
	ft_putendl_fd("Error\n", STDERR_FILENO);
	ft_putendl_fd(error, STDERR_FILENO);
	exit(EXIT_FAILURE);
}

int32_t	read_map(int32_t fd, t_game *shlk)
{
	int32_t		size_read;
	static char	*buff;

	buff = ft_calloc(10000, sizeof(char));
	if (!buff)
		return (1);
	size_read = 1;
	while (size_read != 0)
	{
		size_read = read(fd, buff, 10000);
		if (size_read == -1)
			return (1);
	}
	shlk->lines_map = count_substr(buff, '\n');
	shlk->lines = ft_split(buff, '\n');
	if (!shlk->lines)
		return (1);
	if (check_invalid_char(shlk))
		return (1);
	free(buff);
	return (0);
}

int32_t	process_map(int32_t fd, t_game *shlk)
{
	if (read_map(fd, shlk))
		error_msg("Empty or invalid map.");
	return (0);
}

int32_t	check_invalid_char(t_game *shlk)
{
	int	i;
	int	j;

	i = 0;
	while (i < shlk->lines_map)
	{
		j = 0;
		while (shlk->lines[i][j])
		{
			if (shlk->lines[i][j] == '1' || shlk->lines[i][j] == '0'
				|| shlk->lines[i][j] == 'P' || shlk->lines[i][j] == 'E'
				|| shlk->lines[i][j] == 'C')
				j++;
			else
				return (1);
		}
		i++;
	}
	return (0);
}

int32_t	init_game(t_game *shlk)
{
	xpm_t				*bg;
	static mlx_image_t	*g_back;

	shlk->mlx = mlx_init(WIDTH, HEIGHT, "so_long", true);
	if (!shlk->mlx)
		error_msg("Something goes wrong, try it again.");
	g_back = mlx_new_image(shlk->mlx, 44, 42);
	bg = mlx_load_xpm42("textures/bg.xpm42");
	g_back = mlx_texture_to_image(shlk->mlx, &bg->texture);
	mlx_image_to_window(shlk->mlx, g_back, 0, 0);
	mlx_loop(shlk->mlx);
	mlx_terminate(shlk->mlx);
	return (0);
}

int32_t	count_substr(const char *str, char c)
{
	int	i;
	int	substr;
	int	in_word;

	i = 0;
	substr = 0;
	in_word = 0;
	while (str[i])
	{
		if (str[i] == c)
		{
			i++;
			in_word = 0;
		}
		else
		{
			if (in_word == 0)
			{
				in_word = 1;
				substr++;
			}
			i++;
		}
	}
	return (substr);
}

int32_t	main(int32_t ac, char *av[])
{
	t_game	shlk;
	int32_t	fd;
	size_t	i;

	if (ac == 2)
	{
		fd = open(av[1], O_RDONLY);
		if (fd == -1)
			error_msg("Invalid file.");
		if (check_av_map(av[1]))
			error_msg(WRONG_MAP);
		if (process_map(fd, &shlk))
			error_msg("Invalid map, check if they minimum components are in.");
		i = 0;
		while (i < (size_t)shlk.lines_map)
		{
			printf("MAP[%ld]:|%s|\n", i, shlk.lines[i]);
			i++;
		}
		if (init_game(&shlk))
			return (1);
		return (EXIT_SUCCESS);
		i = 0;
		while (i < (size_t)shlk.lines_map)
		{
			free(shlk.lines[i]);
			i++;
		}
		free(shlk.lines);
	}
	return (EXIT_FAILURE);
}
